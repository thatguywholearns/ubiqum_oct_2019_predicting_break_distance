---
title: "Cars report - David Verbiest"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r echo=FALSE}
#Import all used libraries
library(readr)
library(ggplot2)

#Import dataset_cars and rename the variables
dataset_cars <- read.csv('./R Tutorial Data Sets/cars.csv', header = TRUE)
names(dataset_cars) <- c("name_of_car", "speed_of_car", "distance_of_car")
```
# Executive Summary



# Recommendations



# Nexts Steps


# Analysis

## Exploration of the data

## The Data Set
```{r, echo=FALSE}
knitr::kable(dataset_cars[1:5,], align = "c")
```


### Summary Data Set

```{r, echo=FALSE}
summary_cars <- summary(dataset_cars)
knitr::kable(summary_cars, align = "c")
```


### Boxplot: *Distance Of Car*

```{r fig.align="center", echo=FALSE}
ggplot(dataset_cars, aes(y = distance_of_car)) + geom_boxplot(outlier.colour="red", outlier.shape=8, outlier.size=4)
```

```{r, echo=FALSE, align="c"}
quantile <- quantile(dataset_cars$distance_of_car)
knitr::kable(quantile, align="c")
```

We can see that the there is **one outlier**. The following data point:

```{r fig.align="center", echo=FALSE}
outliers <- boxplot(dataset_cars$distance_of_car, plot=FALSE)$out
outliers_instance <- dataset_cars[which(dataset_cars$distance_of_car %in% outliers), ]
knitr::kable(outliers_instance, align="c")
```


## Preprocessing 

In order not to bias the prediction we remove this data point from the training data.

```{r}
dataset_cars <- dataset_cars[-which(dataset_cars$distance_of_car %in% outliers),]
```


We create a scatter plot between the variables speed of car and distance of car in order to spot any type of relationship between the two variables.

```{r fig.align="center", echo=FALSE}
plot(dataset_cars$distance_of_car, dataset_cars$speed_of_car)
```

We see that there is pattern present, however the pattern is not linear. Distance a car needs to break increases for greater speeds, hinting towards a quadratic relationship. This also makes sense given that velocity and acceleration (or in this case decelartion, which is can be seen as negative acceleration) are described by a second degree polynomials. 

In order to fit a line through the data that is able to predict the data we need to transform the distance variable. We square the variable so that the both variables increase at the same rate. 

```{r fig.align="center"}
dataset_cars$speed_of_car_squared <- dataset_cars$speed_of_car*dataset_cars$speed_of_car
```

When we plot the the variable speed of car squared against the distance of car variable we see that relationship is linear.

```{r fig.align="center", echo=FALSE}
plot(dataset_cars$distance_of_car, dataset_cars$speed_of_car_squared)
```


## Modelling

In order to estimate our model we use 70% of instances randomly selected from the data. We use the remaining 30% to test the resulting model. (We use the random seed:123)

```{r, echo=FALSE}

set.seed(123)

#Create training set and test set by using a 70/30 split 
train_size <- round(nrow(dataset_cars)*0.70)
test_size <- nrow(dataset_cars) - train_size
training_indices <- sample(seq_len(nrow(dataset_cars)), size = train_size)
training_set <- dataset_cars[training_indices,]
test_set <- dataset_cars[-training_indices,]

#Fit Linear model
lm_model1 <- lm(distance_of_car~ speed_of_car_squared, training_set)
summary_model1 <- summary(lm_model1)


```




